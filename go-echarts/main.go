package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
)

type column_data struct {
	Name   string           `json:"name"`
	Items  string           `json:"items"`
	Keymap []map[string]int `json:"data"`
}

var (
	// 定义一个tcp端口号
	tcp_port int
	//port    = flag.Int("port", 0, "服务端口设置参数为：-port=80")
	jsonconfig = flag.String("jsonfile", "", "读取的jsonfile文件")
)

func init() {
	flag.IntVar(&tcp_port, "tcp_port", 0, "TCP服务端口描述: -tcp_port=2001")
	flag.Usage = func() {
		_, _ = fmt.Fprint(os.Stderr,
			"cli : go_flag -port=8080 -config=/usr/local/service/config "+
				"-logfile=/usr/local/service/log/service.log -tcp_port=2001\n")
		flag.PrintDefaults()
	}

	flag.Parse()
}

// 数据生成数据
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

//func main() {
func httpserver(w http.ResponseWriter, _ *http.Request) {
	// 1.New 一个条形图对象
	bar := charts.NewBar()
	// 2.设置 标题 和 子标题
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// 3.设置 数据组
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category c", []opts.BarData{{Value: 40}}).
		AddSeries("Category B", generateBarItems())
	// 4.绘图 生成html
	//f, _ := os.Create("bar.html")
	//bar.Render(f)
	log.Print(generateBarItems())
	bar.Render(w)
}

func jsonload(path string) error {
	var columnlist column_data
	//columnlist := column_data{}
	//columnlist := make([]column_data, 0)
	//columnlist := map[string]int{}
	f, err := os.Open(path)
	if err != nil {
		return err
	}

	filebuf, err := ioutil.ReadAll(f)

	err = json.Unmarshal([]byte(filebuf), &columnlist)
	fmt.Print(columnlist)

	return nil
}

func main() {
	if *jsonconfig != "" {
		fmt.Println("load", *jsonconfig)
		jsonload(*jsonconfig)
	}
	http.HandleFunc("/", httpserver)
	fmt.Println("start http server 8081")
	http.ListenAndServe("10.231.82.67:8081", nil)
}
